#! /bin/sh
# Definitions at top of file for easy editing
LOCALPORT=2222 # Port on the computer to use for iproxy's TCP forwarding.

REMOTEPORT=22 # Port sshd runs on on the device. Default is usually 22.

DEVICE_USER="mobile" # User name on iDevice

IPA_INSTALL_PROG="ipainstaller" # Program on the iDevice to install IPA's with.

IPROXY_PROG="iproxy-quiet" # Change to 'iproxy' if you don't want to use my
                               # patched version or haven't renamed it.
IPADDR="127.0.0.1" # Don't change unless you plan to use this for wireless ssh.

#Documentation follows. Script is at end of documentation.
## iOS Debug Bridge"
# An emulation of a handful of useful adb commands I use for Android devices,
# adapted for jailbroken iOS devices connected via USB.
# Supports only one iDevice plugged in at a time as of now.
#
### Usage:
# idb push [target] [destination]
#     Copies a targeted file on the computer to a destination on the iDevice.
# idb pull [target] [destination]
#     Copies a targeted file from the iDevice to a destination on the computer.
# idb shell
#     Starts a remote shell on the iDevice.
# idb shell [command]
#     Starts a remote shell on the iDevice, runs the given command, and exits.
# idb install [target]
#     Installs the indicated target IPA on the iDevice using `ipainstaller`.
#     Will need modification to work with other CLI IPA installer programs
#     (which need to be installed on the iDevice itself via Cydia or similar).
# idb devices
#     Lists the UDID's of all connected devices. Part of preliminary
#     (incomplete but planned) support for multi-device capability.
# idb list
#     Synonym for `idb devices`.
# idb kill-server
#     Kills all instances of 'iproxy,' the TCP-over-usbmuxd forwarding program.
# idb help
#     Show this usage information.
# idb -h
#     Synonym for `idb help`.
# idb --help
#     Synonym for `idb help`.
#
### System Requirements:
#### On the computer:
#     usbmuxd (https://github.com/libimobiledevice/usbmuxd.git) needs to be
# running for this to work. Tested on Debian Linux, but probably works in
# Mac OS (or Windows with MSYS/Cygwin), based on past experience. On those
# platforms, installing iTunes from Apple will get you usbmuxd, but you'll
# still need to compile the "iproxy" tool from the open-source clone of
# libusbmuxd (see below).
#
#     "iproxy", found at https://github.com/libimobiledevice/libusbmuxd.git
# Put the binary in a directory in your $PATH variable. I use "iproxy-quiet",
# which is a custom version of it I made that doesn't print information except
# on certain errors (i.e. it follows the unix philosophy better). You will have
# to edit this file to use regular iproxy.
#
#     Included in this repository is a patch which should allow you to build
# your own "iproxy-quiet". Apply the patch with either
# `git apply iproxy-quiet.patch` or `patch -p1 < iproxy-quiet.patch` from the
# libusbmuxd source root.
#
#     For *incomplete* (currently inoperable) multi-device support,
# libimobiledevice's "tools" are also required (specifically, "idevice_id").
# These tools are in the 'tools' directory of
# https://github.com/libimobiledevice/libimobiledevice.git .
#
#### On the iDevice:
#     The device has to be connected via USB and have sshd listening on the port
# defined above as REMOTEPORT. Due to the sshd requirement, the device must be
# jailbroken. In Cydia, sshd is installed through the package "OpenSSH" (called
# "openssh", note the casing, if you install it via apt on the command-line).
#
#     Note also that you can get openssh either from Saurik's repository
# (available by default on basically any jailbroken iDevice), or from other
# sources like ios-webstack (see http://ios-webstack.tk ). ios-webstack has
# a newer version of OpenSSH than Saurik's repository does as of January 2018.
#
#     This script can probably be easily adapted for wireless transfers by
# commenting out the iproxy stuff and changing the IP address/LOCALPORT to
# the device address and the port that it's sshd is listening on.
#
#     To avoid having to type a password every time, set up key authentication
# between the computer and the iDevice. I DO NOT RECCOMEND disabling password
# login once key authentication is established.
#
# On the computer, run:
#   ssh-keygen
#   (leave default filenames for the keys)
#   ssh-keygen -p
#   (leave default filenames for the keys)
#
# On the iDevice (probably over ssh), run:
#   mkdir /var/mobile/.ssh
#   echo authstr >> /var/mobile/.ssh/authorized_keys
#   #(where authstr is the output of `cat ~/.ssh/id_rsa.pub` on the computer)
#
# Alternatively if you want to log in as root, you'd change the "DEVICE_USER" field
# above in this script and write to /var/root/.ssh/authorized_keys instead.

### SCRIPT BODY STARTS HERE ###
# remove grep aliases as to avoid color highlighting potential issues
# don't show any error messages
# (used for kill-server)
2>/dev/null 1>&2 unalias grep

IPROXYPID="" # placeholder

startRelay() {
  # hide iproxy output. Look here if you can't make it work and remove the
  # pipe.
  "$IPROXY_PROG" "$LOCALPORT" "$REMOTEPORT" > /dev/null 2>&1 &
  IPROXYPID="$!"
}

listDevices() {
  # preliminary work to support multiple iDevices, untested because I only own
  # one iDevice. Uses "idevice_id" from libimobiledevice tools at
  # https://github.com/libimobiledevice/libimobiledevice.git
  echo "Listing all iDevice UDID's."
  idevice_id -l
}

push() {
  scp -P"$LOCALPORT" "$1" "$DEVICE_USER""@""$IPADDR"":""$2"
}

pull() {
  # if only one argument supplied, the file's destination is in the current
  # directory.
  if [ -z "$2" ]; then
    DEST="."
  else
    DEST="$2"
  fi
  scp -P"$LOCALPORT" "$DEVICE_USER""@""$IPADDR"":""$1" "$DEST"
}

shell() {
  set -x
  ssh -p"$LOCALPORT" "$DEVICE_USER""@""$IPADDR" "$@"
  set +x
}

killServer() {
  # Only POSIX way to get PID's of processes by name that I can find.
  # pidof is not POSIX, nor is pkill, nor is killall.
  # this makes a space-separated list of PID's to kill, and then pumps them
  # through xargs to kill. Since POSIX kill does not explicitly say that
  # killing multiple PID's with one command is supported, I run it once for
  # each PID in the list.
  # I am 99.9% sure this sed usage is POSIX, but I'm not good at
  # regexes.
  echo "Killing all instances of ""$IPROXY_PROG""..."
	PIDS=`ps -o pid,comm  -u "$USER" | grep "$IPROXY_PROG" | sed 's/\s.*$//' | tr '\n' ' '`
  echo "$PIDS" | xargs -n 1 kill
  echo "Done."
}

install() {
  FILENAME=`basename "$1"`
  echo "Pushing ""$1"" to the iDevice..."
  push "$1" "/private/var/""$DEVICE_USER""/""$FILENAME"
  echo "Installing ""$FILENAME"" using ""$IPA_INSTALL_PROG""... Please wait."
  shell "$IPA_INSTALL_PROG" "/private/var/""$DEVICE_USER""/""$FILENAME"
  echo "Install program finished, deleting the IPA from the iDevice..."
  shell rm "/private/var/""$DEVICE_USER""/""$FILENAME"
  echo "Done."
}

usageHelp() {
echo "Usage:"
echo "`basename "$0"`"" push [target] [destination]"
echo "    Copies a targeted file on the computer to a destination on the iDevice."
echo "`basename "$0"`"" pull [target] [destination]"
echo "    Copies a targeted file from the iDevice to a destination on the computer."
echo "`basename "$0"`"" shell"
echo "    Starts a remote shell on the iDevice."
echo "`basename "$0"`"" shell [command]"
echo "    Starts a remote shell on the iDevice, runs the given command, and exits."
echo "`basename "$0"`"" install [target]"
echo "    Installs the indicated target IPA on the iDevice using ""$IPA_INSTALL_PROG""."
echo "    Will need modification to work with other CLI IPA installer programs"
echo "    (which need to be installed on the iDevice itself via Cydia or similar)."
echo "`basename "$0"`"" devices"
echo "    Lists the UDID's of all connected devices. Part of preliminary"
echo "    (incomplete but planned) support for multi-device capability."
echo "`basename "$0"`"" list"
echo "    Synonym for '""`basename "$0"`"" devices'."
echo "`basename "$0"`"" kill-server"
echo "    Kills all instances of ""$IPROXY_PROG"", the TCP-over-usbmuxd program."
echo "`basename "$0"`"" help"
echo "    Show this usage information."
echo "`basename "$0"`"" -h"
echo "    Synonym for '""`basename "$0"`"" help'."
echo "`basename "$0"`"" --help"
echo "    Synonym for '""`basename "$0"`"" help'."
echo
echo "Some configuration inside this script's source may be required."
echo "Open this program in a text editor for more documentation."
}

# push
if [ "$1" = "push" ]; then
  startRelay
  shift 1 # strip first argument (i.e., "push"), leaving only remaining args
  push "$1" "$2"
# pull
elif [ "$1" = "pull" ]; then
  startRelay
  shift 1
  pull "$1" "$2"
# shell
elif [ "$1" = "shell" ]; then
  startRelay
  shift 1
  shell "$@"
# install
elif [ "$1" = "install" ]; then
  startRelay
  shift 1
  install "$1"
# list
elif [ "$1" = "list" ]; then
  listDevices
# devices
elif [ "$1" = "devices" ]; then
  listDevices
# kill-server
elif [ "$1" = "kill-server" ]; then
  killServer
# help
elif [ "$1" = "help" ]; then
# FIXME: probably could just put all this in the catch-all.
# Unless someone knows a good reason I shouldn't.
  usageHelp
elif [ "$1" = "--help" ]; then
  usageHelp
elif [ "$1" = "-help" ]; then
  usageHelp
else
  usageHelp
fi

# clean-up
kill "$IPROXYPID" 2>/dev/null
true #return 0
