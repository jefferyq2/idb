#! /bin/sh
# Definitions at top of file for easy editing
LOCALPORT=2222 # Port on the computer to use for iproxy's TCP forwarding.

REMOTEPORT=22 # Port sshd runs on on the device. Default is usually 22.

DEVICE_USER="mobile" # User name on iDevice

IPA_INSTALL_PROG="ipainstaller" # Program on the iDevice to install IPA's with.

IPROXY_PROG="iproxy-quiet" # Change to 'iproxy' if you don't want to use my
                               # patched version or haven't renamed it.
IPADDR="127.0.0.1" # Don't change unless you plan to use this for wireless ssh.

### SCRIPT BODY STARTS HERE ###
# remove grep aliases as to avoid color highlighting potential issues
# don't show any error messages
# (used for kill-server)
2>/dev/null 1>&2 unalias grep

IPROXYPID="" # placeholder global variable, set by some commands

startRelay() {
  # hide iproxy output. Look here if you can't make it work and remove the
  # pipe to see the diagnostics.
  "$IPROXY_PROG" "$LOCALPORT" "$REMOTEPORT" > /dev/null 2>&1 &
  IPROXYPID="$!"
}

listDevices() {
  # preliminary work to support multiple iDevices, untested because I only own
  # one iDevice. Uses "idevice_id" from libimobiledevice tools at
  # https://github.com/libimobiledevice/libimobiledevice.git
  echo "Listing all iDevice UDID's."
  idevice_id -l
}

push() {
  scp -P"$LOCALPORT" "$1" "$DEVICE_USER""@""$IPADDR"":""$2"
}

pull() {
  # if only one argument is supplied, the file's destination is in the current
  # directory.
  if [ -z "$2" ]; then
    DEST="."
  else
    DEST="$2"
  fi
  scp -P"$LOCALPORT" "$DEVICE_USER""@""$IPADDR"":""$1" "$DEST"
}

shell() {
  set -x
  ssh -p"$LOCALPORT" "$DEVICE_USER""@""$IPADDR" "$@"
  set +x
}

killServer() {
  # Only POSIX way to get PID's of processes by name that I can find.
  # pidof is not POSIX, nor is pkill, nor is killall.
  # this makes a space-separated list of PID's to kill, and then pumps them
  # through xargs to kill. Since POSIX kill does not explicitly say that
  # killing multiple PID's with one command is supported, I run it once for
  # each PID in the list.
  # I am 99.9% sure this sed usage is POSIX, but I'm not very good at
  # regexes.
  echo "Killing all instances of ""$IPROXY_PROG""..."
	PIDS=`ps -o pid,comm  -u "$USER" | grep "$IPROXY_PROG" | sed 's/\s.*$//' | tr '\n' ' '`
  echo "$PIDS" | xargs -n 1 kill
  echo "Done."
}

install() {
  FILENAME=`basename "$1"`
  echo "Pushing ""$1"" to the iDevice..."
  push "$1" "/private/var/""$DEVICE_USER""/""$FILENAME"
  echo "Installing ""$FILENAME"" using ""$IPA_INSTALL_PROG""... Please wait."
  shell "$IPA_INSTALL_PROG" "/private/var/""$DEVICE_USER""/""$FILENAME"
  echo "Install program finished, deleting the IPA from the iDevice..."
  shell rm "/private/var/""$DEVICE_USER""/""$FILENAME"
  echo "Done."
}

forward() {
  if [ ! "$#" -eq 2 ]; then
    echo "forward: error: Need two args, but was given ""$#""." 1>&2
  else
    echo "Attempting to forward between local port ""$1"" & remote port ""$2""."
    echo "Use ^C to close the connection (it runs in the foreground.)"
    "$IPROXY_PROG" "$@"
  fi

}

# Printed when no command is given as a memory jogger.
# 'usageHelp' contains the full descriptions.
usageHelpBrief() {
  echo "Abridged usage:"
  echo "  ""`basename "$0"`"" push [target] [destination]"
  echo "  ""`basename "$0"`"" pull [target] [destination]"
  echo "  ""`basename "$0"`"" shell"
  echo "  ""`basename "$0"`"" shell [command]"
  echo "  ""`basename "$0"`"" forward [local] [remote]"
  echo "  ""`basename "$0"`"" install [target]"
  echo "  ""`basename "$0"`"" devices"
  echo "  ""`basename "$0"`"" list"
  echo "  ""`basename "$0"`"" kill-server"
  echo "  ""`basename "$0"`"" help"
  echo "To see more detailed descriptions of these commands, as well as more options,"
  echo "run '""`basename "$0"`"" help'."
}

usageHelp() {
  echo "Usage:"
  echo "`basename "$0"`"" push [target] [destination]"
  echo "    Copies a targeted file on the computer to a destination on the iDevice."
  echo "`basename "$0"`"" pull [target] [destination]"
  echo "    Copies a targeted file from the iDevice to a destination on the computer."
  echo "`basename "$0"`"" shell"
  echo "    Starts a remote shell on the iDevice."
  echo "`basename "$0"`"" shell [command]"
  echo "    Starts a remote shell on the iDevice, runs the given command, and exits."
  echo "`basename "$0"`"" forward [local] [remote]"
  echo "    Forwards socket connections (currently only TCP ports are tested)."
  echo "    Unlike ADB, [local] and [remote] here should be integer values. That is,"
  echo "    'tcp:25565', the ADB syntax, would be just '25565' here."
  echo "`basename "$0"`"" install [target]"
  echo "    Installs the indicated target IPA on the iDevice using ""$IPA_INSTALL_PROG""."
  echo "    Will need modification to work with other CLI IPA installer programs"
  echo "    (which need to be installed on the iDevice itself via Cydia or similar)."
  echo "`basename "$0"`"" devices"
  echo "    Lists the UDID's of all connected devices. Part of preliminary"
  echo "    (incomplete but planned) support for multi-device capability."
  echo "`basename "$0"`"" list"
  echo "    Synonym for '""`basename "$0"`"" devices'."
  echo "`basename "$0"`"" kill-server"
  echo "    Kills all instances of ""$IPROXY_PROG"", the TCP-over-usbmuxd program."
  echo "`basename "$0"`"" help"
  echo "    Show this usage information."
  echo "`basename "$0"`"" -h"
  echo "    Synonym for '""`basename "$0"`"" help'."
  echo "`basename "$0"`"" --help"
  echo "    Synonym for '""`basename "$0"`"" help'."
  echo
  echo "Some configuration inside this script's source may be required."
  echo "Open this program in a text editor for more documentation."
}

# push
if [ "$1" = "push" ]; then
  startRelay
  shift 1 # strip first argument (i.e., "push"), leaving only remaining args
  push "$1" "$2"
# pull
elif [ "$1" = "pull" ]; then
  startRelay
  shift 1
  pull "$1" "$2"
# shell
elif [ "$1" = "shell" ]; then
  startRelay
  shift 1
  shell "$@"
elif [ "$1" = "forward" ]; then
  shift 1
  forward "$@"
# install
elif [ "$1" = "install" ]; then
  startRelay
  shift 1
  install "$1"
# list
elif [ "$1" = "list" ]; then
  listDevices
# devices
elif [ "$1" = "devices" ]; then
  listDevices
# kill-server
elif [ "$1" = "kill-server" ]; then
  killServer
# help
elif [ "$1" = "help" ]; then
# FIXME: probably could just put all this in the catch-all.
# Unless someone knows a good reason I shouldn't.
  usageHelp
elif [ "$1" = "--help" ]; then
  usageHelp
elif [ "$1" = "-help" ]; then
  usageHelp
else
  if [ "$#" -gt 0 ]; then # If we were given a command, but it was incorrect
    # The fallback case should dump the help text to stderr rather than stdout.
    echo "`basename "$0"`"": Error: '""$1""' is not a valid command." 1>&2
    echo "Please note that not all 'adb'commands have exact analogues in this" 1>&2
    echo "script." 1>&2
  else
    echo "`basename "$0"`"": Error: No command given." 1>&2
    usageHelpBrief 1>&2
  fi
fi

# clean-up
kill "$IPROXYPID" 2>/dev/null # not all commands need to use iproxy, but for those that do we need to make sure it's closed.
true #return 0
